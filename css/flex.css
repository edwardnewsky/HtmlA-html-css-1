
/*Флексбокс - основные свойства*/
.flex .lesson-1 {
	/*Задает элементу и вложным в него значение - флексбокс*/
		display: flex; 

	/*Направление главной оси (X)*/
		flex-direction: 
			row — значение по умолчанию, главная ось направлена слева направо.
			column — главная ось направлена сверху вниз.
			---
			row-reverse — главная ось направлена справа налево.
			column-reverse — главная ось направлена снизу вверх.;
		
	/*Выравние вдоль главной оси (X)*/
		justify-content: 
			center - по центру главной оси.
			flex-start - в начале главной оси.
			flex-end - в конце главной оси.
			---
			space-between - расстояния между соседними элементами одинаковые, между элементами и краями флекс-контейнера отступов нет.
			space-around — расстояния между соседними элементами одинаковые, между элементами и краями флекс-контейнера есть отступ, равный половине расстояния между соседними элементами.;

	/*Выравнивание элементов вдоль поперечной оси (Y)*/ - используется для одного ряда
		align-items: 
			stretch - значением по умолчанию, растягиваются на всю «высоту» флекс-контейнера. Еслизадана высота, то растягиваться не будут. 
			---
			flex-start - в начале поперечной оси.
			center - по центру поперечной оси.
			flex-end - в конце поперечной оси.
			---
			baseline - элементы будут выравниваться по базовой линии текста в них.;

	/*Выравнивание вдоль поперечной оси (Y) для отдельного элемента*/
		align-self:
			stretch - значением по умолчанию, растягиваются на всю «высоту» флекс-контейнера. Еслизадана высота, то растягиватьсяне будут. 
			---
			flex-start - в начале поперечной оси.
			center - по центру поперечной оси.
			flex-end - в конце поперечной оси.
			---
			baseline - элементы будут выравниваться по базовой линии текста в них.;	

	/*Перенос flex элементов*/
		flex-wrap: 
			wrap - разрешает перенос флекс-элементов на новую строку, если они не помещаются в контейнер.
			nowrap - перенос флекс-элементов на новую строку запрещён.
			---
			wrap-reverse -  ряды будут располагаться в обратном порядке: первый в конце поперечной оси, а последний в начале.;
			
	/*Выравнивание рядов flex элементов вдоль поперечной оси (Y)*/ - всегда «перекрывает» заданное значение align-items !если задано stretch - не перекрывает! - использутеся когда рядов больше одного
		align-content: 
			stretch - значение по умолчанию, растягиваются на всю «высоту» флекс-контейнера.
			---
			flex-start - в начале поперечной оси.
			center - по центру поперечной оси.
			flex-end - в конце поперечной оси.
			---
			space-between - расстояния между соседними элементами одинаковые, между элементами и краями флекс-контейнера отступов нет.
			space-around - расстояния между соседними элементами одинаковые, между элементами и краями флекс-контейнера есть отступ, равный половине расстояния между соседними элементами.;

	/*Порядковый номер flex-элемента*/ - порядковый номер задаётся целым числом, положительным или отрицательным. 
		order: 
			0 - по умолчанию.
			-1 - этот элемент станет отображаться первым в контейнере.;
}

/*Управление размерами флекс элементов*/
.flex .lesson-2 { 

	/*Стандартные свойства*/
		box-sizing: - работает как обычно;
		

		width: - работает как обычно;
		height: - работает как обычно;
		---
		padding: - работает как обычно;
		margin: - особые правила
			не реагирует на направление осей
			внешние отступы не схлопываются, ни по горизонтали, ни по вертикали.
			внешние отступы не выпадают, ни из флекс-контейнера, ни из флекс-элементов.
			«ломает» - justify-content.
			«ломает» - align-items.
			не работют направления осей.;
	
	/*Специальные свойства*/
		/*Базовый размер флекс элемента вдоль главной оси*/
			flex-basis: - сильнее стандартных свойств - width и height - реагирует на направление осей
				auto - базовый размер берётся из width или height.
				---
				px.
				%.;
			
		/*Коэффициент растягивания элементов*/
			flex-grow: - остаётся свободное место -> флекс-элемент увеличивается и занимает это место (принимает неотрицательные числовые значения)
				0 - значение по умолчанию.
				1...99999;
					/*Расчёт итогового размера с flex-grow*/
						1 шаг. Рассчитываем свободное место во флекс-контейнере
							[Свободное место = Ширина контейнера - Сумма базовых размеров элементов]
						2 шаг. Считаем размер минимальной доли свободного места
							[Доля свободного места = Свободное место / Сумма flex-grow всех элементов]
						3 шаг. Базовый размер каждого флекс-элемента увеличиваем на размер минимальной доли свободного места, умноженной на значение flex-grow этого элемента
							[Итоговый размер = Базовый размер + (Доля свободного места * flex-grow)]	

		/*Коэффициент сжатия элементов*/
			flex-shrink: - перераспределение отрицательного пространства (не помещается)
				1 - значение по умолчанию.
				---
				x > 0 - элемент будет уменьшатся.
				x = 0 - элемент не уменьшается.; 
					/*Расчёт итогового размера с flex-shrink*/
						1 шаг. Рассчитываем отрицательное пространство (ОП) во флекс-контейнере
							[ОП = Ширина контейнера - Сумма базовых размеров элементов]
						2 шаг. Находим сумму произведений базовых размеров (СПБР) элементов на их коэффициенты сжатия
							[СПБР = (Базовый размер1 * flex-shrink1) + (Базовый размер2 * flex-shrink2) + … + (Базовый размерn * flex-shrinkn)]	
						3 шаг. Для каждого элемента считаем «нормированный коэффициент сжатия» (НКС), для чего произведение базового размера элемента на его коэффициент сжатия делим на СПБР
							[НКС = (Базовый размер * flex-shrink) / СПБР].
						4 шаг. Базовый размер элемента уменьшаем на часть ОП пропорциональную НКС элемента
							[Итоговый размер = Базовый размер - (НКС * ОП)]

		/*Сокращённое свойство flex*/
				flex: 1 2 300px;
				---
				flex-grow: 1;
				flex-shrink: 2;
				flex-basis: 300px;
}


